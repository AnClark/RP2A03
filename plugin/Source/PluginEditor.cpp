/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "BinaryData.h"

//==============================================================================
RP2A03AudioProcessorEditor::RP2A03AudioProcessorEditor (RP2A03AudioProcessor& p)
    : slAudioProcessorEditor (p, 80, 100), processor (p)
{
    using AP = RP2A03AudioProcessor;
    
    logo = ImageFileFormat::loadFrom (BinaryData::logo_png, BinaryData::logo_pngSize);
    
    for (slParameter* pp : p.getPluginParameters())
    {
        auto uid = pp->getUid();
        ParamComponent* c;
        
        if (uid == AP::paramPulse1Tune      ||
            uid == AP::paramPulse1TuneFine  ||
            uid == AP::paramPulse2Tune      ||
            uid == AP::paramPulse2TuneFine  ||
            uid == AP::paramTriangleTune    ||
            uid == AP::paramTriangleTuneFine)
        {
            c = new Knob (pp, true);
        }
        else
        {
            c = pp->isOnOff() ? (ParamComponent*)new Switch (pp) : (ParamComponent*)new Knob (pp);
        }
        
        addAndMakeVisible (c);
        controls.add (c);
    }
    
    addAndMakeVisible (&scope);
    
    setGridSize (10, 2);
    
    scope.setNumSamplesPerPixel (2);
    scope.setVerticalZoomFactor (3.0f);
}

RP2A03AudioProcessorEditor::~RP2A03AudioProcessorEditor()
{
}

//==============================================================================
void RP2A03AudioProcessorEditor::paint (Graphics& g)
{
    slAudioProcessorEditor::paint (g);
    
    g.setFont (Font (15.0f));
    g.setColour (Colours::white);
    g.drawText("Ver: " JucePlugin_VersionString, getLocalBounds().reduced (4), Justification::topRight);
    
    g.drawImageAt (logo, getWidth() / 2 - logo.getWidth() / 2, 0);
}

void RP2A03AudioProcessorEditor::resized()
{
    using AP = RP2A03AudioProcessor;
    
    slAudioProcessorEditor::resized();
    
    Rectangle<int> r = getControlsArea();
    
    componentForId (AP::paramPulse1Level)->setBounds (getGridArea (0, 0));
    componentForId (AP::paramPulse1DutyCycle)->setBounds (getGridArea (1, 0));
    componentForId (AP::paramPulse1Tune)->setBounds (getGridArea (2, 0));
    componentForId (AP::paramPulse1TuneFine)->setBounds (getGridArea (3, 0));
    
    componentForId (AP::paramPulse2Level)->setBounds (getGridArea (0, 1));
    componentForId (AP::paramPulse2DutyCycle)->setBounds (getGridArea (1, 1));
    componentForId (AP::paramPulse2Tune)->setBounds (getGridArea (2, 1));
    componentForId (AP::paramPulse2TuneFine)->setBounds (getGridArea (3, 1));
    
    componentForId (AP::paramTriangleLevel)->setBounds (getGridArea (7, 0));
    componentForId (AP::paramTriangleTune)->setBounds (getGridArea (8, 0));
    componentForId (AP::paramTriangleTuneFine)->setBounds (getGridArea (9, 0));
    
    componentForId (AP::paramNoiseLevel)->setBounds (getGridArea (7, 1));
    componentForId (AP::paramNoiseShort)->setBounds (getGridArea (8, 1));
    componentForId (AP::paramOutput)->setBounds (getGridArea (9, 1));

    scope.setBounds (getGridArea (4, 0, 3, 2).reduced (5));
}
