/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
RP2A03AudioProcessorEditor::RP2A03AudioProcessorEditor (RP2A03AudioProcessor& p)
    : slAudioProcessorEditor (p), processor (p)
{
    for (slParameter* pp : p.getPluginParameters())
    {
        ParamComponent* c = pp->isOnOff() ? (ParamComponent*)new Switch (pp) : (ParamComponent*)new Knob (pp);
        
        addAndMakeVisible (c);
        controls.add (c);
    }
    
    addAndMakeVisible (&scope);
    
    setSize (cx * 6, cy * 2);
    
    scope.setNumSamplesPerPixel (2);
    scope.setVerticalZoomFactor (3.0f);
}

RP2A03AudioProcessorEditor::~RP2A03AudioProcessorEditor()
{
}

//==============================================================================
void RP2A03AudioProcessorEditor::resized()
{
    using AP = RP2A03AudioProcessor;
    
    slAudioProcessorEditor::resized();
    
    Rectangle<int> r = getControlsArea();
    
    componentForId (AP::paramPulse1Level)->setBounds (getGridArea (0, 0));
    componentForId (AP::paramPulse1DutyCycle)->setBounds (getGridArea (0, 1));
    componentForId (AP::paramPulse2Level)->setBounds (getGridArea (1, 0));
    componentForId (AP::paramPulse2DutyCycle)->setBounds (getGridArea (1, 1));
    componentForId (AP::paramNoiseLevel)->setBounds (getGridArea (4, 0));
    componentForId (AP::paramNoiseShort)->setBounds (getGridArea (4, 1));
    componentForId (AP::paramTriangleLevel)->setBounds (getGridArea (5, 0));
    componentForId (AP::paramOutput)->setBounds (getGridArea (5, 1));

    scope.setBounds (getGridArea (2, 0, 2, 2));
}
